# Create a completely clean and valid pyproject.toml file
clean_pyproject_toml = '''[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mayini-framework"
version = "0.1.3"
description = "A comprehensive deep learning framework with Tensor operations, ANN, CNN, and RNN implementations"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Abhishek Adari", email = "abhishekadari85@gmail.com"}
]
maintainers = [
    {name = "Palivela Giridhar", email = "nanipalivela830@gmail.com"}
]
keywords = [
    "deep-learning", 
    "machine-learning", 
    "neural-networks", 
    "tensor", 
    "pytorch-like", 
    "framework",
    "autograd",
    "neural-network"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0,<2.0.0",
    "matplotlib>=3.5.0,<4.0.0",
    "seaborn>=0.11.0,<1.0.0",
    "tqdm>=4.64.0,<5.0.0",
    "scikit-learn>=1.1.0,<2.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0,<8.0",
    "pytest-cov>=4.0,<5.0",
    "black>=23.0,<25.0",
    "flake8>=5.0,<7.0",
    "mypy>=1.0,<2.0",
    "pre-commit>=3.0,<4.0"
]
docs = [
    "sphinx>=5.0,<8.0",
    "sphinx-rtd-theme>=1.0,<3.0",
    "myst-parser>=0.18,<3.0"
]
test = [
    "pytest>=7.0,<8.0",
    "pytest-cov>=4.0,<5.0",
    "pytest-xdist>=3.0,<4.0"
]
examples = [
    "jupyter>=1.0,<2.0",
    "notebook>=6.4,<8.0",  
    "ipywidgets>=8.0,<9.0"
]

[project.urls]
Homepage = "https://github.com/907-bot-collab/mayini"
Documentation = "https://mayini-framework.readthedocs.io/"
Repository = "https://github.com/907-bot-collab/mayini"
"Bug Tracker" = "https://github.com/907-bot-collab/mayini/issues"
"Changelog" = "https://github.com/907-bot-collab/mayini/blob/main/CHANGELOG.md"
"Discussions" = "https://github.com/907-bot-collab/mayini/discussions"

[tool.setuptools]
package-dir = {"" = "src"}
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
include = ["mayini*"]

[tool.setuptools.package-data]
mayini = ["py.typed"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mayini"]
known_third_party = ["numpy", "matplotlib", "seaborn", "sklearn", "tqdm"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q", 
    "--strict-markers",
    "--strict-config"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU"
]

[tool.coverage.run]
source = ["src/mayini"]
omit = [
    "tests/*",
    "*/__pycache__/*",
    "*/site-packages/*"
]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
'''

print("âœ… CLEAN pyproject.toml created!")
print("ðŸ”§ Removed all problematic syntax:")
print("1. âœ… Simplified all tool configurations")
print("2. âœ… Removed complex regex patterns")
print("3. âœ… Removed problematic escape sequences") 
print("4. âœ… Kept only essential configurations")
print("5. âœ… Ensured valid TOML syntax throughout")
print(f"\nFile length: {len(clean_pyproject_toml)} characters")
print("This version should parse without any TOML syntax errors.")
